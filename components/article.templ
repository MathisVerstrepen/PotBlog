package components

import (
    "fmt"
    "potblog/infrastructure"
	"strings"
)

templ Article(metadata infrastructure.Metadata, html string) {
    <article>
        @articleHeader(metadata)
        @templ.Raw(html)
    </article>
}

templ articleHeader(metadata infrastructure.Metadata) {
    <div class="mb-20">
        @TitleH1(metadata.Title)

        <div class="flex space-x-4 mt-4 mb-2">
            @timeChip(metadata.Date)
            for _, tag := range metadata.Tags {
                @tagChip(tag)
            }
        </div>

        <p class="text-lg text-grey">By {metadata.Author}</p>
    </div>
}

templ timeChip(date string) {
    <time datetime={date} 
        class="text-beige text-lg font-bold font-sans py-1 px-4 flex items-center w-fit bg-green rounded-2xl shadow-sm border-2 border-dark_green">
        {date}
    </time>
}

templ tagChip(tag string) {
    <a class="text-orange text-lg font-bold font-sans py-1 px-4 bg-beige rounded-2xl shadow-sm border-2 border-dark_beige hover:bg-dark_beige duration-200"
        href={templ.SafeURL(fmt.Sprintf("/tags/%s", tag))}
    >
        #{tag}
    </a>
}

templ ArticleNotFound() {
    <div class="flex flex-col items-center justify-center h-full min-h-[calc(100vh/2)]">
        <img src="/assets/images/catnopers.webp" alt="catnopers" loading="lazy" class="h-32 w-[172px]">
        <p class="text-lg text-grey mt-10 text-center">Sorry !<br>The article you are looking for does not exist.</p>
    </div>
}

func categoriesCount (articles []infrastructure.Metadata) map[string]int {
    categories := make(map[string]int)
    for _, article := range articles {
        for _, category := range article.Tags {
            categories[strings.ToLower(category)]++
        }
    }

    return categories
}

templ Articles(articles []infrastructure.Metadata) {
    <div class="flex space-x-4 items-center mb-8">
        <div class="mh-12 w-12 text-green">@UseIcon("code", "currentColor", "auto")</div>
        <h1 class="text-5xl font-bold text-grey font-sans">Dev Articles</h1>
    </div>

    <form class="flex space-x-4 items-center mb-16"
        hx-post="/en/articles"
        hx-target="#articles"
        hx-trigger="change"
    >
        <select name="sort" id="sort" class="text-beige font-bold font-sans h-9 px-5 bg-green rounded-2xl shadow-sm border-2 border-dark_green hover:bg-dark_green duration-200">
            <option value="date" selected>Date asc</option>
            <option value="date">Date desc</option>
            <option value="title">Title asc</option>
            <option value="title">Title desc</option>
        </select>

        <style type="text/css">
            input:checked + label {
                background-color: var(--c_green);
                color: var(--c_beige);

                &:hover {
                    background-color: var(--c_dark_green);
                }

                &>span {
                    background-color: var(--c_beige);
                    color: var(--c_green);
                }
            }
        </style>

        for category, count := range categoriesCount(articles) {
            <input type="checkbox" name={category} id={category} class="hidden"></input>

            <label for={category} class="text-green font-bold font-sans py-1 px-5 bg-beige rounded-2xl shadow-sm border-2 border-green hover:bg-dark_beige duration-200">
                #{category} <span class="bg-green text-beige rounded-2xl px-2 ml-2">{fmt.Sprintf("%d", count)}</span>
            </label>
        }
    </form>

    @ArticleGrid(articles)
}

templ ArticleGrid(articles []infrastructure.Metadata) {
    <div class="grid grid-cols-2 gap-10" id="articles">
        for _, article := range articles {
            @articleCard(article)
        }
    </div>
}

templ articleCard(metadata infrastructure.Metadata) {
    <div class="h-60 w-full border-2 border-dark_beige rounded-xl py-5 px-8 shadow-sm flex flex-col">
        <a href={templ.SafeURL(fmt.Sprintf("/en/article/%s", metadata.Name))}
            class="font-sans text-grey font-bold text-2xl hover:underline duration-200">
            {metadata.Title}
        </a>
        <time datetime={metadata.Date} class="text-orange font-semibold">{metadata.Date}</time>
        <p class="text-grey mt-4 h-16">{metadata.Description}</p>
        @articleCardTags(metadata.Tags)
    </div>
}

templ articleCardTags(tags []string) {
    <div class="flex space-x-4 mt-6 mb-2">
        for _, tag := range tags {
            @articleCardTagChip(tag)
        }
    </div>
}

templ articleCardTagChip(tag string) {
    <a class="text-beige font-bold font-sans py-1 px-4 bg-green rounded-2xl shadow-sm"
        href={templ.SafeURL(fmt.Sprintf("/tags/%s", tag))}
    >
        #{tag}
    </a>
}